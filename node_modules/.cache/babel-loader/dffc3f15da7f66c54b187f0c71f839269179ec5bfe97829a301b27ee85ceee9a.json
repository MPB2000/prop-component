{"ast":null,"code":"import _objectSpread from \"C:/Users/melis/Documents/GitHub/prop-component/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\melis\\\\Documents\\\\GitHub\\\\prop-component\\\\src\\\\Components\\\\ToDoList\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ToDoListItem from \"../ToDoListItem\";\nimport { Modal } from \"../Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ToDoList() {\n  _s();\n  const [todoList, setTodoList] = useState([]);\n  const handleDelete = id => {\n    const updatedList = todoList.filter(todo => todo.id !== id);\n    setTodoList(updatedList);\n  };\n  const handleChecked = id => {\n    const updatedList = todoList.map(todo => todo.id === id ? _objectSpread(_objectSpread({}, todo), {}, {\n      checked: !todo.checked\n    }) : todo);\n    setTodoList(updatedList);\n  };\n  const handleAdd = text => {\n    const newTodo = {\n      id: todoList.length + 1,\n      text,\n      checked: false\n    };\n    setTodoList([...todoList, newTodo]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleAdd(\"New Todo\"),\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAdd,\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), todoList.map(todo => /*#__PURE__*/_jsxDEV(ToDoListItem, {\n      type: \"checkbox\",\n      checked: todo.checked,\n      onDelete: () => handleDelete(todo.id),\n      onChecked: () => handleChecked(todo.id)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoList, \"8oII/eZSxfH0CVCrakPxQrDDmr8=\");\n_c = ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["useState","ToDoListItem","Modal","jsxDEV","_jsxDEV","ToDoList","_s","todoList","setTodoList","handleDelete","id","updatedList","filter","todo","handleChecked","map","_objectSpread","checked","handleAdd","text","newTodo","length","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","isModalOpen","onClose","handleCloseModal","type","onDelete","onChecked","_c","$RefreshReg$"],"sources":["C:/Users/melis/Documents/GitHub/prop-component/src/Components/ToDoList/index.tsx"],"sourcesContent":["import { ReactNode, CSSProperties, useState } from \"react\";\r\nimport ToDoListItem from \"../ToDoListItem\";\r\nimport { Modal } from \"../Modal\";\r\n\r\ntype Todo = {\r\n  id: number;\r\n  text: string;\r\n  checked: boolean;\r\n};\r\nexport default function ToDoList() {\r\n  const [todoList, setTodoList] = useState<Todo[]>([]);\r\n\r\n  const handleDelete = (id: number) => {\r\n    const updatedList = todoList.filter((todo) => todo.id !== id);\r\n    setTodoList(updatedList);\r\n  };\r\n\r\n  const handleChecked = (id: number) => {\r\n    const updatedList = todoList.map((todo) =>\r\n      todo.id === id ? { ...todo, checked: !todo.checked } : todo\r\n    );\r\n    setTodoList(updatedList);\r\n  };\r\n\r\n  const handleAdd = (text: string) => {\r\n    const newTodo = {\r\n      id: todoList.length + 1,\r\n      text,\r\n      checked: false,\r\n    };\r\n    setTodoList([...todoList, newTodo]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => handleAdd(\"New Todo\")}>Add Todo</button>\r\n      <button onClick={handleAdd}>Add Todo</button>\r\n      <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\r\n      </Modal>\r\n      {todoList.map((todo) => (\r\n        <ToDoListItem\r\n          key={todo.id}\r\n          type=\"checkbox\"\r\n          checked={todo.checked}\r\n          onDelete={() => handleDelete(todo.id)}\r\n          onChecked={() => handleChecked(todo.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,SAAmCA,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,SAASC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOjC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAEpD,MAAMS,YAAY,GAAIC,EAAU,IAAK;IACnC,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC7DF,WAAW,CAACG,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMG,aAAa,GAAIJ,EAAU,IAAK;IACpC,MAAMC,WAAW,GAAGJ,QAAQ,CAACQ,GAAG,CAAEF,IAAI,IACpCA,IAAI,CAACH,EAAE,KAAKA,EAAE,GAAAM,aAAA,CAAAA,aAAA,KAAQH,IAAI;MAAEI,OAAO,EAAE,CAACJ,IAAI,CAACI;IAAO,KAAKJ,IACzD,CAAC;IACDL,WAAW,CAACG,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMO,SAAS,GAAIC,IAAY,IAAK;IAClC,MAAMC,OAAO,GAAG;MACdV,EAAE,EAAEH,QAAQ,CAACc,MAAM,GAAG,CAAC;MACvBF,IAAI;MACJF,OAAO,EAAE;IACX,CAAC;IACDT,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEa,OAAO,CAAC,CAAC;EACrC,CAAC;EAED,oBACEhB,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAQmB,OAAO,EAAEA,CAAA,KAAML,SAAS,CAAC,UAAU,CAAE;MAAAI,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/DvB,OAAA;MAAQmB,OAAO,EAAEL,SAAU;MAAAI,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7CvB,OAAA,CAACF,KAAK;MAAC0B,MAAM,EAAEC,WAAY;MAACC,OAAO,EAAEC;IAAiB;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,EACPpB,QAAQ,CAACQ,GAAG,CAAEF,IAAI,iBACjBT,OAAA,CAACH,YAAY;MAEX+B,IAAI,EAAC,UAAU;MACff,OAAO,EAAEJ,IAAI,CAACI,OAAQ;MACtBgB,QAAQ,EAAEA,CAAA,KAAMxB,YAAY,CAACI,IAAI,CAACH,EAAE,CAAE;MACtCwB,SAAS,EAAEA,CAAA,KAAMpB,aAAa,CAACD,IAAI,CAACH,EAAE;IAAE,GAJnCG,IAAI,CAACH,EAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKb,CACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrB,EAAA,CAzCuBD,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}